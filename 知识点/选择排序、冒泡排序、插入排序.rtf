{\rtf1\ansi\ansicpg936\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset134 PingFangSC-Regular;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red193\green193\blue193;\red34\green34\blue34;\red135\green135\blue135;
\red191\green131\blue194;\red234\green121\blue57;\red88\green196\blue193;}
{\*\expandedcolortbl;;\cssrgb\c80000\c80000\c80000;\cssrgb\c17647\c17647\c17647;\cssrgb\c60000\c60000\c60000;
\cssrgb\c80000\c60000\c80392;\cssrgb\c94118\c55294\c28627;\cssrgb\c40392\c80392\c80000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\'b4\'f0\'a3\'ba
\f1 \

\f0 \'d1\'a1\'d4\'f1\'c5\'c5\'d0\'f2\'a1\'a2\'c3\'b0\'c5\'dd\'c5\'c5\'d0\'f2\'a1\'a2\'b2\'e5\'c8\'eb\'c5\'c5\'d0\'f2\'c8\'fd\'d6\'d6\'c5\'c5\'d0\'f2\'cb\'e3\'b7\'a8\'bf\'c9\'d2\'d4\'d7\'dc\'bd\'e1\'ce\'aa\'c8\'e7\'cf\'c2\'a3\'ba
\f1 \
\

\f0 \'b6\'bc\'bd\'ab\'ca\'fd\'d7\'e9\'b7\'d6\'ce\'aa\'d2\'d1\'c5\'c5\'d0\'f2\'b2\'bf\'b7\'d6\'ba\'cd\'ce\'b4\'c5\'c5\'d0\'f2\'b2\'bf\'b7\'d6\'a1\'a3
\f1 \
\

\f0 \'d1\'a1\'d4\'f1\'c5\'c5\'d0\'f2\'bd\'ab\'d2\'d1\'c5\'c5\'d0\'f2\'b2\'bf\'b7\'d6\'b6\'a8\'d2\'e5\'d4\'da\'d7\'f3\'b6\'cb\'a3\'ac\'c8\'bb\'ba\'f3\'d1\'a1\'d4\'f1\'ce\'b4\'c5\'c5\'d0\'f2\'b2\'bf\'b7\'d6\'b5\'c4\'d7\'ee\'d0\'a1\'d4\'aa\'cb\'d8\'ba\'cd\'ce\'b4\'c5\'c5\'d0\'f2\'b2\'bf\'b7\'d6\'b5\'c4\'b5\'da\'d2\'bb\'b8\'f6\'d4\'aa\'cb\'d8\'bd\'bb\'bb\'bb\'a1\'a3
\f1 \
\

\f0 \'c3\'b0\'c5\'dd\'c5\'c5\'d0\'f2\'bd\'ab\'d2\'d1\'c5\'c5\'d0\'f2\'b2\'bf\'b7\'d6\'b6\'a8\'d2\'e5\'d4\'da\'d3\'d2\'b6\'cb\'a3\'ac\'d4\'da\'b1\'e9\'c0\'fa\'ce\'b4\'c5\'c5\'d0\'f2\'b2\'bf\'b7\'d6\'b5\'c4\'b9\'fd\'b3\'cc\'d6\'b4\'d0\'d0\'bd\'bb\'bb\'bb\'a3\'ac\'bd\'ab\'d7\'ee\'b4\'f3\'d4\'aa\'cb\'d8\'bd\'bb\'bb\'bb\'b5\'bd\'d7\'ee\'d3\'d2\'b6\'cb\'a1\'a3
\f1 \
\

\f0 \'b2\'e5\'c8\'eb\'c5\'c5\'d0\'f2\'bd\'ab\'d2\'d1\'c5\'c5\'d0\'f2\'b2\'bf\'b7\'d6\'b6\'a8\'d2\'e5\'d4\'da\'d7\'f3\'b6\'cb\'a3\'ac\'bd\'ab\'ce\'b4\'c5\'c5\'d0\'f2\'b2\'bf\'b7\'d6\'d4\'aa\'b5\'c4\'b5\'da\'d2\'bb\'b8\'f6\'d4\'aa\'cb\'d8\'b2\'e5\'c8\'eb\'b5\'bd\'d2\'d1\'c5\'c5\'d0\'f2\'b2\'bf\'b7\'d6\'ba\'cf\'ca\'ca\'b5\'c4\'ce\'bb\'d6\'c3\'a1\'a3
\f1 \
\
\pard\pardeftab720\partightenfactor0
\cf4 /** \
 *  
\f0 \'a1\'be\'d1\'a1\'d4\'f1\'c5\'c5\'d0\'f2\'a1\'bf\'a3\'ba\'d7\'ee\'d6\'b5\'b3\'f6\'cf\'d6\'d4\'da\'c6\'f0\'ca\'bc\'b6\'cb
\f1 \
 *  \
 *  
\f0 \'b5\'da
\f1 1
\f0 \'cc\'cb\'a3\'ba\'d4\'da
\f1 n
\f0 \'b8\'f6\'ca\'fd\'d6\'d0\'d5\'d2\'b5\'bd\'d7\'ee\'d0\'a1
\f1 (
\f0 \'b4\'f3
\f1 )
\f0 \'ca\'fd\'d3\'eb\'b5\'da\'d2\'bb\'b8\'f6\'ca\'fd\'bd\'bb\'bb\'bb\'ce\'bb\'d6\'c3
\f1 \
 *  
\f0 \'b5\'da
\f1 2
\f0 \'cc\'cb\'a3\'ba\'d4\'da\'ca\'a3\'cf\'c2
\f1 n-1
\f0 \'b8\'f6\'ca\'fd\'d6\'d0\'d5\'d2\'b5\'bd\'d7\'ee\'d0\'a1
\f1 (
\f0 \'b4\'f3
\f1 )
\f0 \'ca\'fd\'d3\'eb\'b5\'da\'b6\'fe\'b8\'f6\'ca\'fd\'bd\'bb\'bb\'bb\'ce\'bb\'d6\'c3
\f1 \
 *  
\f0 \'d6\'d8\'b8\'b4\'d5\'e2\'d1\'f9\'b5\'c4\'b2\'d9\'d7\'f7
\f1 ...
\f0 \'d2\'c0\'b4\'ce\'d3\'eb\'b5\'da\'c8\'fd\'b8\'f6\'a1\'a2\'b5\'da\'cb\'c4\'b8\'f6
\f1 ...
\f0 \'ca\'fd\'bd\'bb\'bb\'bb\'ce\'bb\'d6\'c3
\f1 \
 *  
\f0 \'b5\'da
\f1 n-1
\f0 \'cc\'cb\'a3\'ac\'d7\'ee\'d6\'d5\'bf\'c9\'ca\'b5\'cf\'d6\'ca\'fd\'be\'dd\'b5\'c4\'c9\'fd\'d0\'f2\'a3\'a8\'bd\'b5\'d0\'f2\'a3\'a9\'c5\'c5\'c1\'d0\'a1\'a3
\f1 \
 *\
 */\cf2 \
\pard\pardeftab720\partightenfactor0
\cf5 void\cf2  \cf6 selectSort\cf2 (int \cf7 *\cf2 arr, int length) \{\
    \cf5 for\cf2  (int i \cf7 =\cf2  \cf6 0\cf2 ; i \cf7 <\cf2  length \cf7 -\cf2  \cf6 1\cf2 ; i\cf7 ++\cf2 ) \{ \cf4 //
\f0 \'cc\'cb\'ca\'fd
\f1 \cf2 \
        \cf5 for\cf2  (int j \cf7 =\cf2  i \cf7 +\cf2  \cf6 1\cf2 ; j \cf7 <\cf2  length; j\cf7 ++\cf2 ) \{ \cf4 //
\f0 \'b1\'c8\'bd\'cf\'b4\'ce\'ca\'fd
\f1 \cf2 \
            \cf5 if\cf2  (arr[i] \cf7 >\cf2  arr[j]) \{\
                int temp \cf7 =\cf2  arr[i];\
                arr[i] \cf7 =\cf2  arr[j];\
                arr[j] \cf7 =\cf2  temp;\
            \}\
        \}\
    \}\
\}\
\
\pard\pardeftab720\partightenfactor0
\cf4 /** \
 *  
\f0 \'a1\'be\'c3\'b0\'c5\'dd\'c5\'c5\'d0\'f2\'a1\'bf\'a3\'ba\'cf\'e0\'c1\'da\'d4\'aa\'cb\'d8\'c1\'bd\'c1\'bd\'b1\'c8\'bd\'cf\'a3\'ac\'b1\'c8\'bd\'cf\'cd\'ea\'d2\'bb\'cc\'cb\'a3\'ac\'d7\'ee\'d6\'b5\'b3\'f6\'cf\'d6\'d4\'da\'c4\'a9\'ce\'b2
\f1 \
 *  
\f0 \'b5\'da
\f1 1
\f0 \'cc\'cb\'a3\'ba\'d2\'c0\'b4\'ce\'b1\'c8\'bd\'cf\'cf\'e0\'c1\'da\'b5\'c4\'c1\'bd\'b8\'f6\'ca\'fd\'a3\'ac\'b2\'bb\'b6\'cf\'bd\'bb\'bb\'bb\'a3\'a8\'d0\'a1\'ca\'fd\'b7\'c5\'c7\'b0\'a3\'ac\'b4\'f3\'ca\'fd\'b7\'c5\'ba\'f3\'a3\'a9\'d6\'f0\'b8\'f6\'cd\'c6\'bd\'f8\'a3\'ac\'d7\'ee\'d6\'b5\'d7\'ee\'ba\'f3\'b3\'f6\'cf\'d6\'d4\'da\'b5\'da
\f1 n
\f0 \'b8\'f6\'d4\'aa\'cb\'d8\'ce\'bb\'d6\'c3
\f1 \
 *  
\f0 \'b5\'da
\f1 2
\f0 \'cc\'cb\'a3\'ba\'d2\'c0\'b4\'ce\'b1\'c8\'bd\'cf\'cf\'e0\'c1\'da\'b5\'c4\'c1\'bd\'b8\'f6\'ca\'fd\'a3\'ac\'b2\'bb\'b6\'cf\'bd\'bb\'bb\'bb\'a3\'a8\'d0\'a1\'ca\'fd\'b7\'c5\'c7\'b0\'a3\'ac\'b4\'f3\'ca\'fd\'b7\'c5\'ba\'f3\'a3\'a9\'d6\'f0\'b8\'f6\'cd\'c6\'bd\'f8\'a3\'ac\'d7\'ee\'d6\'b5\'d7\'ee\'ba\'f3\'b3\'f6\'cf\'d6\'d4\'da\'b5\'da
\f1 n-1
\f0 \'b8\'f6\'d4\'aa\'cb\'d8\'ce\'bb\'d6\'c3
\f1 \
 *   \'85\'85   \'85\'85\
 *  
\f0 \'b5\'da
\f1 n-1
\f0 \'cc\'cb\'a3\'ba\'d2\'c0\'b4\'ce\'b1\'c8\'bd\'cf\'cf\'e0\'c1\'da\'b5\'c4\'c1\'bd\'b8\'f6\'ca\'fd\'a3\'ac\'b2\'bb\'b6\'cf\'bd\'bb\'bb\'bb\'a3\'a8\'d0\'a1\'ca\'fd\'b7\'c5\'c7\'b0\'a3\'ac\'b4\'f3\'ca\'fd\'b7\'c5\'ba\'f3\'a3\'a9\'d6\'f0\'b8\'f6\'cd\'c6\'bd\'f8\'a3\'ac\'d7\'ee\'d6\'b5\'d7\'ee\'ba\'f3\'b3\'f6\'cf\'d6\'d4\'da\'b5\'da
\f1 2
\f0 \'b8\'f6\'d4\'aa\'cb\'d8\'ce\'bb\'d6\'c3
\f1  \
 */\cf2 \
\pard\pardeftab720\partightenfactor0
\cf5 void\cf2  \cf6 bublleSort\cf2 (int \cf7 *\cf2 arr, int length) \{\
    \cf5 for\cf2 (int i \cf7 =\cf2  \cf6 0\cf2 ; i \cf7 <\cf2  length \cf7 -\cf2  \cf6 1\cf2 ; i\cf7 ++\cf2 ) \{ \cf4 //
\f0 \'cc\'cb\'ca\'fd
\f1 \cf2 \
        \cf5 for\cf2 (int j \cf7 =\cf2  \cf6 0\cf2 ; j \cf7 <\cf2  length \cf7 -\cf2  i \cf7 -\cf2  \cf6 1\cf2 ; j\cf7 ++\cf2 ) \{ \cf4 //
\f0 \'b1\'c8\'bd\'cf\'b4\'ce\'ca\'fd
\f1 \cf2 \
            \cf5 if\cf2 (arr[j] \cf7 >\cf2  arr[j\cf7 +\cf6 1\cf2 ]) \{\
                int temp \cf7 =\cf2  arr[j];\
                arr[j] \cf7 =\cf2  arr[j\cf7 +\cf6 1\cf2 ];\
                arr[j\cf7 +\cf6 1\cf2 ] \cf7 =\cf2  temp;\
            \}\
        \} \
    \}\
\}\
\
\pard\pardeftab720\partightenfactor0
\cf4 /**\
 *  
\f0 \'d5\'db\'b0\'eb\'b2\'e9\'d5\'d2\'a3\'ba\'d3\'c5\'bb\'af\'b2\'e9\'d5\'d2\'ca\'b1\'bc\'e4\'a3\'a8\'b2\'bb\'d3\'c3\'b1\'e9\'c0\'fa\'c8\'ab\'b2\'bf\'ca\'fd\'be\'dd\'a3\'a9
\f1 \
 *\
 *  
\f0 \'d5\'db\'b0\'eb\'b2\'e9\'d5\'d2\'b5\'c4\'d4\'ad\'c0\'ed\'a3\'ba
\f1 \
 *   1> 
\f0 \'ca\'fd\'d7\'e9\'b1\'d8\'d0\'eb\'ca\'c7\'d3\'d0\'d0\'f2\'b5\'c4
\f1 \
 *   2> 
\f0 \'b1\'d8\'d0\'eb\'d2\'d1\'d6\'aa
\f1 min
\f0 \'ba\'cd
\f1 max
\f0 \'a3\'a8\'d6\'aa\'b5\'c0\'b7\'b6\'ce\'a7\'a3\'a9
\f1 \
 *   3> 
\f0 \'b6\'af\'cc\'ac\'bc\'c6\'cb\'e3
\f1 mid
\f0 \'b5\'c4\'d6\'b5\'a3\'ac\'c8\'a1\'b3\'f6
\f1 mid
\f0 \'b6\'d4\'d3\'a6\'b5\'c4\'d6\'b5\'bd\'f8\'d0\'d0\'b1\'c8\'bd\'cf
\f1 \
 *   4> 
\f0 \'c8\'e7\'b9\'fb
\f1 mid
\f0 \'b6\'d4\'d3\'a6\'b5\'c4\'d6\'b5\'b4\'f3\'d3\'da\'d2\'aa\'b2\'e9\'d5\'d2\'b5\'c4\'d6\'b5\'a3\'ac\'c4\'c7\'c3\'b4
\f1 max
\f0 \'d2\'aa\'b1\'e4\'d0\'a1\'ce\'aa
\f1 mid-1\
 *   5> 
\f0 \'c8\'e7\'b9\'fb
\f1 mid
\f0 \'b6\'d4\'d3\'a6\'b5\'c4\'d6\'b5\'d0\'a1\'d3\'da\'d2\'aa\'b2\'e9\'d5\'d2\'b5\'c4\'d6\'b5\'a3\'ac\'c4\'c7\'c3\'b4
\f1 min
\f0 \'d2\'aa\'b1\'e4\'b4\'f3\'ce\'aa
\f1 mid+1\
 *\
 */\cf2  \
\cf4 // 
\f0 \'d2\'d1\'d6\'aa\'d2\'bb\'b8\'f6\'d3\'d0\'d0\'f2\'ca\'fd\'d7\'e9
\f1 , 
\f0 \'ba\'cd\'d2\'bb\'b8\'f6
\f1 key, 
\f0 \'d2\'aa\'c7\'f3\'b4\'d3\'ca\'fd\'d7\'e9\'d6\'d0\'d5\'d2\'b5\'bd
\f1 key
\f0 \'b6\'d4\'d3\'a6\'b5\'c4\'cb\'f7\'d2\'fd\'ce\'bb\'d6\'c3
\f1  \cf2 \
int \cf6 findKey\cf2 (int \cf7 *\cf2 arr, int length, int key) \{\
    int min \cf7 =\cf2  \cf6 0\cf2 , max \cf7 =\cf2  length \cf7 -\cf2  \cf6 1\cf2 , mid;\
    \cf5 while\cf2  (min \cf7 <=\cf2  max) \{\
        mid \cf7 =\cf2  (min \cf7 +\cf2  max) \cf7 /\cf2  \cf6 2\cf2 ; \cf4 //
\f0 \'bc\'c6\'cb\'e3\'d6\'d0\'bc\'e4\'d6\'b5
\f1 \cf2 \
        \cf5 if\cf2  (key \cf7 >\cf2  arr[mid]) \{\
            min \cf7 =\cf2  mid \cf7 +\cf2  \cf6 1\cf2 ;\
        \} \cf5 else\cf2  \cf5 if\cf2  (key \cf7 <\cf2  arr[mid]) \{\
            max \cf7 =\cf2  mid \cf7 -\cf2  \cf6 1\cf2 ;\
        \} \cf5 else\cf2  \{\
            \cf5 return\cf2  mid;\
        \}\
    \}\
    \cf5 return\cf2  \cf7 -\cf6 1\cf2 ;\
\}}